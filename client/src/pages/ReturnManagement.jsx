import { useEffect, useState } from "react";
import axios from "axios";
import { Table, Button, message, Card, Typography, Spin, Tag } from "antd";
import { CheckOutlined } from "@ant-design/icons";


const { Title } = Typography;

const ReturnManagement = () => {
  const [loans, setLoans] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchBorrowedEquipment();
  }, []);

  const fetchBorrowedEquipment = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem("token");
      const userId = localStorage.getItem("userID");

      if (!token || !userId) {
        message.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        setLoading(false);
        return;
      }

      const response = await axios.get(`http://localhost:3307/api/loans/borrowed/${userId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setLoans(response.data);
    } catch (error) {
      message.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ",error);
    }
    setLoading(false);
  };

  const handleReturn = async (loanId, equipmentId) => {
    try {
      const token = localStorage.getItem("token");
      await axios.put(
        `http://localhost:3307/api/loans/return/${loanId}`,
        { equipmentId }, // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ equipmentId ‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° quantity
        { headers: { Authorization: `Bearer ${token}` } }
      );

      message.success("‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      fetchBorrowedEquipment();
    } catch (error) {
      message.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",error);
    }
  };

  const columns = [
    {
      title: "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
      dataIndex: "equipment_name",
      key: "equipment_name",
    },
    {
      title: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°",
      dataIndex: "borrow_date",
      key: "borrow_date",
    },
    {
      title: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
      dataIndex: "status",
      key: "status",
      render: (status) => (
        <Tag color={status === "borrowed" ? "blue" : "green"}>
          {status === "borrowed" ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß"}
        </Tag>
      ),
    },
    {
      title: "‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
      key: "action",
      render: (_, record) =>
        record.status === "borrowed" && (
          <Button type="primary" icon={<CheckOutlined />} onClick={() => handleReturn(record.id, record.equipment_id)}>
            ‡∏Ñ‡∏∑‡∏ô
          </Button>
        ),
    },
  ];

  return (
    <Card className="return-container">
      <Title level={2}>üì¶ ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</Title>
      {loading ? <Spin size="large" /> : <Table columns={columns} dataSource={loans} rowKey="id" />}
    </Card>
  );
};

export default ReturnManagement;

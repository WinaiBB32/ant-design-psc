import { useEffect, useState } from "react";
import axios from "axios";
import { Table, Button, message, Card, Typography, Spin, Tag } from "antd";
import { CheckOutlined, CloseOutlined } from "@ant-design/icons";
import "../styles/LoanApprovals.css";

const { Title } = Typography;

const LoanApprovals = () => {
  const [loans, setLoans] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchLoanRequests();
  }, []);

  const fetchLoanRequests = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem("token");

      if (!token) {
        message.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        setLoading(false);
        return;
      }

      const response = await axios.get("http://localhost:3307/api/loans/pending", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setLoans(response.data);
    } catch (error) {
      message.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ",error);
    }
    setLoading(false);
  };

  const handleApproval = async (loanId, status) => {
    try {
      const token = localStorage.getItem("token");
      await axios.put(
        `http://localhost:3307/api/loans/approve/${loanId}`,
        { status },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      message.success(`‚úÖ ${status === "approved" ? "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" : "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"} ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      fetchLoanRequests();
    } catch (error) {
      message.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",error);
    }
  };

  const columns = [
    {
      title: "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
      dataIndex: "equipment_name",
      key: "equipment_name",
    },
    {
      title: "‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°",
      dataIndex: "borrower_name",
      key: "borrower_name",
    },
    {
      title: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°",
      dataIndex: "borrow_date",
      key: "borrow_date",
    },
    {
      title: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
      dataIndex: "status",
      key: "status",
      render: (status) => (
        <Tag color={status === "borrowed" ? "orange" : status === "approved" ? "green" : "red"}>
          {status === "borrowed" ? "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" : status === "approved" ? "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" : "‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"}
        </Tag>
      ),
    },
    {
      title: "‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
      key: "action",
      render: (_, record) => (
        <div style={{ display: "flex", gap: "10px" }}>
          <Button type="primary" icon={<CheckOutlined />} onClick={() => handleApproval(record.id, "approved")}>
            ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
          </Button>
          <Button type="danger" icon={<CloseOutlined />} onClick={() => handleApproval(record.id, "rejected")}>
            ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
          </Button>
        </div>
      ),
    },
  ];

  return (
    <Card className="loan-approvals-container">
      <Title level={2}>üìã ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</Title>
      {loading ? <Spin size="large" /> : <Table columns={columns} dataSource={loans} rowKey="id" />}
    </Card>
  );
};

export default LoanApprovals;

import { useState, useEffect } from "react";
import { Table, Button, Modal, Form, Input, InputNumber, Upload, Select, message, Card } from "antd";
import { UploadOutlined } from "@ant-design/icons";
import { getAllEquipment, getCategories, addEquipment, updateEquipment, deleteEquipment } from "../services/api";

function EquipmentManagement() {
    const [equipment, setEquipment] = useState([]);
    const [categories, setCategories] = useState([]);
    const [open, setOpen] = useState(false);
    const [editMode, setEditMode] = useState(false);
    const [selectedEquipment, setSelectedEquipment] = useState(null);
    const [form] = Form.useForm();

    useEffect(() => {
        fetchEquipment();
        fetchCategories();
    }, []);

    async function fetchEquipment() {
        try {
            const { data } = await getAllEquipment();
            setEquipment(data);
        } catch (error) {
            message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ",error);
        }
    }

    async function fetchCategories() {
        try {
            const { data } = await getCategories();
            setCategories(data);
        } catch (error) {
            message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ",error);
        }
    }

    async function handleSubmit(values) {
        console.log("üìå Debug Submit Values:", values); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
        
        const formData = new FormData();
        formData.append("name", values.name);
        formData.append("category", values.category);
        formData.append("location", values.location);
        formData.append("quantity", values.quantity);
        if (values.image && values.image.file) {
            formData.append("image", values.image.file);
        }

        try {
            if (editMode) {
                await updateEquipment(selectedEquipment.id, formData);
                message.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            } else {
                await addEquipment(formData);
                message.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            }
            setOpen(false);
            fetchEquipment();
        } catch (error) {
            message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",error);
        }
    }

    async function handleDelete(id) {
        try {
            await deleteEquipment(id);
            message.success("‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            fetchEquipment();
        } catch (error) {
            message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",error);
        }
    }

    function handleEdit(record) {
        setEditMode(true);
        setSelectedEquipment(record);
        form.setFieldsValue(record);
        setOpen(true);
    }

    return (
        <div style={{ padding: "20px" }}>
            <h2>üì¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h2>
            <Button type="primary" onClick={() => {
                setEditMode(false);
                form.resetFields();
                setOpen(true);
            }}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</Button>

            <Card title="üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" style={{ marginTop: "20px" }}>
                <Table
                    columns={[
                        { title: "üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", dataIndex: "name" },
                        { title: "üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", dataIndex: "category" },
                        { title: "üìç ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", dataIndex: "location" },
                        { title: "üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", dataIndex: "quantity" },
                        {
                            title: "üñº ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
                            dataIndex: "image",
                            render: (image) =>
                                image ? <img src={`http://localhost:3307${image}`} alt="Equipment" style={{ width: 50 }} /> : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ",
                        },
                        {
                            title: "‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
                            render: (_, record) => (
                                <>
                                    <Button type="link" onClick={() => handleEdit(record)}>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Button>
                                    <Button type="link" danger onClick={() => handleDelete(record.id)}>üóë ‡∏•‡∏ö</Button>
                                </>
                            ),
                        },
                    ]}
                    dataSource={equipment}
                    rowKey="id"
                />
            </Card>

            <Modal title={editMode ? "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå" : "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"} open={open} onCancel={() => setOpen(false)} onOk={() => form.submit()}>
                <Form form={form} onFinish={handleSubmit} layout="vertical">
                    <Form.Item name="name" label="üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå" rules={[{ required: true }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="category" label="üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" rules={[{ required: true }]}>
                        <Select options={categories.map(c => ({ value: c.name, label: c.name }))} />
                    </Form.Item>
                    <Form.Item name="location" label="üìç ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö" rules={[{ required: true }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item name="quantity" label="üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" rules={[{ required: true }]}>
                        <InputNumber min={1} />
                    </Form.Item>
                    <Form.Item name="image" label="üñº ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û">
                        <Upload beforeUpload={() => false} listType="picture">
                            <Button icon={<UploadOutlined />}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå</Button>
                        </Upload>
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    );
}

export default EquipmentManagement;
